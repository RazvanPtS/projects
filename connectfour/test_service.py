from unittest import TestCase
from service import *
from repo import *

class TestService(TestCase):
    def test_placeOnBoard_changeOfBoard_MoveMade(self):
        serviceCaller=Service()
        serviceCaller.placeOnBoard(2)
        board=serviceCaller.repoCaller.getBoard()
        self.assertTrue(board[0][2]!=0)
    def test_placeOnBoard_changeOfTurn_MovesMade(self):
        serviceCaller=Service()
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(1)
        board=serviceCaller.repoCaller.getBoard()
        self.assertTrue(board[0][1]==1)
        self.assertFalse(board[1][1]==1)
    def test_restartGame_cleanBoard(self):
        serviceCaller=Service()
        serviceCaller.placeOnBoard(1)
        board=serviceCaller.repoCaller.getBoard()
        self.assertTrue(board[0][1]==1)
        serviceCaller.restartGame()
        board=serviceCaller.repoCaller.getBoard()
        self.assertFalse(board[0][1]==1)
    def test_checkLine_coloumnThatContainsWinningRequirements(self):
        serviceCaller=Service()
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(0)
        self.assertTrue(serviceCaller.checkLine(1,0))
    def test_checkColoumn_lineThatContainsWinningRequirements(self):
        serviceCaller=Service()
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(2)
        serviceCaller.placeOnBoard(3)
        serviceCaller.placeOnBoard(4)
        self.assertTrue(serviceCaller.checkColoumn(0,1))
    def test_checkDiagonalPositive_checkingDiagonalsWithPositiveSlope(self):
        serviceCaller=Service()
        serviceCaller.placeOnBoard(3)
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(2)
        serviceCaller.placeOnBoard(2)
        serviceCaller.placeOnBoard(2)
        serviceCaller.placeOnBoard(3)
        serviceCaller.placeOnBoard(3)
        serviceCaller.placeOnBoard(3)
        self.assertTrue(serviceCaller.checkDiagonalPositive(0,0))
    def test_checkDiagonalNegative_checkingDiagonalsWithnegativeSlope(self):
        serviceCaller = Service()
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(3)
        serviceCaller.placeOnBoard(2)
        serviceCaller.placeOnBoard(2)
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(0)
        self.assertTrue(serviceCaller.checkDiagonalNegative(0,3))
    def test_checkForWinners_notAWinningSituation(self):
        serviceCaller=Service()
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(2)
        serviceCaller.placeOnBoard(3)
        self.assertFalse(serviceCaller.checkColoumn(0,0))
    def test_checkForWinners_WinningSituation(self):
        serviceCaller=Service()
        serviceCaller.placeOnBoard(0)
        serviceCaller.placeOnBoard(1)
        serviceCaller.placeOnBoard(2)
        serviceCaller.placeOnBoard(3)
        serviceCaller.placeOnBoard(4)
        self.assertTrue(serviceCaller.checkColoumn(0,1))